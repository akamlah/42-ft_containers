/* ************************************************************************ */
/*																			*/
/*								ft:: MAP									*/
/*																			*/
/* ************************************************************************ */

/* ------------------------------- CONTENTS ----------------------------------
ITERATORS
	__tre_iterator
	__tre_const_iterator
TREE
	__tree
--------------------------------------------------------------------------- */

#ifndef __FT__TREE_HPP_
# define __FT__TREE_HPP_

namespace ft { /* NAMESPACE FT */

/* ------------------------------------------------------------------------ */
// ITERATORS
/* ------------------------------------------------------------------------ */

// template <class _Tp>
// struct __tree_key_value_types { }; // ?

// template <class _Tp, class _NodePtr, class _DiffType>
// class _LIBCPP_TEMPLATE_VIS __tree_iterator
// { };


// template <class _Tp, class _NodePtr, class _DiffType>
// class _LIBCPP_TEMPLATE_VIS __tree_const_iterator
// { };

/* ------------------------------------------------------------------------ */
// TREE
/* ------------------------------------------------------------------------ */

template <class _Tp, class _Compare, class _Allocator>
class __tree
{
/* ======================== TYPEDEFS ====================================== */


/* ======================== MEMBER CLASSES ================================ */

template<typename T>
class __Node {
private:
	pointer _rc; //left child
	pointer _lc; // right child
	pointer _parent; // ?
	bool _color; // ? bool

	__Node(): _rc(NULL), _lc(NULL), color(red), parent(NULL) {}
	~__Node() {};

	// right rotate node:
	// 	lc's parent becomes old node's parent
	// 	lc becomes new parent
	// 	lc'c lc becomes node's rc

	// left rotate node -> reverse => test thees by trying to see if lrot + rrot == 0 rot

};

/* ======================== ATTRIBUTES ==================================== */

/* ------------------------------------------------------------------------ */
/* ======================== MEMBER FUNCTIONS ============================== */
/* ------------------------------------------------------------------------ */

/* ------------------------ construction: --------------------------------- */

/* ------------------------ destruction: ---------------------------------- */

/* ------------------------ assignment: ---------------------------------- */

/* ======================== ACCESSORS ===================================== */

/* ------------------------ allocator: ------------------------------------ */

/* ------------------------ elements: ------------------------------------- */

/* ------------------------ iterators: ------------------------------------ */

/* ------------------------ capacity: ------------------------------------- */

/* ======================== MODIFIERS ===================================== */

/* ------------------------ insertion: ------------------------------------ */

/* ------------------------ deletion -------------------------------------- */

/*  ----------------------- swap: ----------------------------------------- */

/* ======================== LOOKUP ======================================== */

/* ======================== OBSERVERS ===================================== */

/* ======================== INTERNAL FUNCTIONALITIES ====================== */

}; /* __TREE */

/* - NON MEMBER FUNCTIONS ------------------------------------------------- */
/* operator==,!=,<,<=,>,>=,<=> */

/* - end TREE ------------------------------------------------------------- */

} /* NAMESPACE FT end ------------------------------------------------------*/
#endif // __FT__TREE_HPP_
